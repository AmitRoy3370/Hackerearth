import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

 class TestCase {

    static Scanner scanner=new Scanner(System.in);
    
    static int nodes,edges,a,b,weight;
    
    static class Graph implements Comparable<Graph> {
        
        int a,b,weight;

        public Graph(int a, int b, int weight) {
            this.a = a;
            this.b = b;
            this.weight = weight;
        }

        public Graph() {
        
            
        }

        public int getA() {
            return a;
        }

        public void setA(int a) {
            this.a = a;
        }

        public int getB() {
            return b;
        }

        public void setB(int b) {
            this.b = b;
        }

        public int getWeight() {
            return weight;
        }

        public void setWeight(int weight) {
            this.weight = weight;
        }

        @Override
        public int compareTo(Graph t) {
        //    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
        if( this.getWeight()>t.getWeight() ){
            
            return 1;
            
        }else if( this.getWeight()<t.getWeight() ){
            
            return -1;
            
        }
        
        return 0;
        
        }
        
    }
    
    static Graph graph=new Graph();
    
    static List<Graph> list=new ArrayList<>();
    
    static int par[];
    
    static int find(int a){
        
       if( par[a]==-1 ){
           
          // list.get(a).setA( find( list.get(a).getA() ) );
           
          return a;
          
       }
        
      return par[a]=find( par[a] );
       
    }
    
    public static void main(String[] args) {
        
        nodes=scanner.nextInt();
        
        par=new int[nodes];
        
        edges=scanner.nextInt();
        
        for(int i=0;i<edges;i++){
            
            a=scanner.nextInt()-1;
            b=scanner.nextInt()-1;
            
            weight=scanner.nextInt();
    
            try{
                
                list.add( new Graph(a,b,weight) );
                
            }catch(Exception e){
                
                
            }
            
            try{
                
              //  list.add( new Graph( b,a,weight ) );
                
            }catch(Exception e){
                
                
            }
            
        }
        
        Collections.sort(list);
        
        for(int i=0;i<nodes;i++){
            
            par[i]=-1;
            
        }
        
        long sum=0;
        
        for(int i=0;i<edges;i++){
            
            int x=find( list.get(i).getA() );
            int y=find( list.get(i).getB() );
            
            if( x!=y ){
                
                sum+=list.get(i).getWeight();
                
                par[ x ]=y;
                
            }
            
        }
        
        System.out.println(sum);
        
    }
    
}
/*4 5
1 2 7
1 4 6
4 2 9
4 3 8
2 3 6*/
