import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

 class TestCase {
    
    static Scanner scanner=new Scanner(System.in);
    
    static int node,a,b,d,minimum;
    
    static class Graph{
        
        int node,minimum;
        
        boolean visited[]=new boolean[node];
        
        List<List<Integer>> list=new ArrayList<>();
        
        List<Integer> distance=new ArrayList<>();

        int answer[];
        
        public Graph(int node) {
            this.node = node;
        
            for(int i=0;i<node;i++){
                
                list.add(new ArrayList<>());
                
            }
            
            visited=new boolean[node];
            
            answer=new int[node];
            
        }

        public Graph() {
            
            
        }

        public int getNode() {
            return node;
        }

        public void setNode(int node) {
            this.node = node;
        }
        
        void setDistance(int dis){
            
            distance.add(dis);
            
        }
        
        void AddEdge(int a,int b){
            
            try{
                
                list.get(a).add(b);
                
            }catch(Exception e){
                
                
            }
            
            try{
                
                list.get(b).add(a);
                
            }catch(Exception e){
                
                
            }
            
        }
        
        void DFS(int source,int d){
            
            visited[source]=true;
            
            Stack<Integer> stack=new Stack<>();
         
            stack.push(source);
            
            answer[source]=d;
            
            while(!stack.isEmpty()){
                
                int element=stack.pop();
                
                for(int i: list.get(element)){

try{
                    
                    if( visited[i]==false ){
                        
                        stack.push(i);
                        
                        visited[i]=true;
               
                        try{
                        
                        answer[i]=1+answer[element];
                        
                        }catch(Exception e){
                            
                            
                        }
                        
                    }
                
}catch(Exception e){
    
    
}
                    
                }
             
            }
            
            //System.out.println("min: "+Collections.min( Arrays.asList(answer) ));
            
           // System.out.println("arrays: "+Arrays.toString(answer));     
            
        }
        
    }
    
    static Graph graph=new Graph();
    
    public static void main(String[] args) {
        
        node=scanner.nextInt();
        
        graph=new Graph(node);
        
        for(int i=0;i<node-1;i++){
            
            a=scanner.nextInt()-0;
            b=scanner.nextInt()-0;
            
            graph.AddEdge(a, b);
            
        }
       
        int id;
        
        id=scanner.nextInt();
        
        for(int i=0;i<id;i++){
            
            d=scanner.nextInt()-0;
            
            graph.setDistance(d);
            
        }
        
       graph.DFS( 1,0 );
        
       minimum=Integer.MAX_VALUE;
       
       int ans=-1;
       
for(int i: graph.distance){

try{
    
    if( graph.answer[i]<minimum ){
        
        minimum=graph.answer[i];
        
        ans=i;
        
    }else{
        
        if( i==minimum && i<ans ){
            
            ans=i;
            
        }
        
    }
    
}catch(Exception e){
    
    
}
    
}
       
        System.out.println(ans);

    }
    
}
/*6
1 2
1 3
1 4
2 5
2 6
4
5
6
3
4*/
