import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

 class TestCase {

    static int testCases;
    
    static BufferedReader in=new BufferedReader( new InputStreamReader( System.in ) );
    
    public static void main(String[] args) throws IOException {
        
        testCases=Integer.parseInt( in.readLine() );
        
        for(int i=0;i<testCases;i++){
            
            char c=in.readLine().trim().charAt(0);
            
            String s=in.readLine().trim();
            
int index=-1;

for(int j=0;j<s.length();j++ ){

if( s.charAt( j )==c ){

index=j;

}

}

if( index==-1 ){

System.out.println("0");

}else{

//         /   char []ch=s.toCharArray();
            
            solve( c,s );

}

        }
        
    }

    private static void solve(char c,String s) {
    //    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    
int dp[][][]=new int[ s.length() ][ s.length() ][ 2 ];

int n=s.length();

for ( int i = 0 ; i < n ; i += 1 ) {
	
    for ( int j = 0 ; j < n ; j += 1 ) {

        if ( i == j ) {
					
                    dp [i][j][1] = 1 ;				
				
                    dp [i][j][0] = ( ( s.charAt(i) == c ) ? 1 : 0 ) ;
		
        } else {
				
                dp [i][j][0] = dp [i][j][1] = 0 ;
				
               }
			
                        }
		
}

for ( int j = 1 ; j < n ; j += 1 ) {

    for ( int i = j - 1 ; i >= 0 ; i -= 1 ) {

        if ( s.charAt(i) == s.charAt(j) ) {
	
            dp [i][j][1] = dp [i + 1][j - 1][1] + 2 ; 
	
                         if ( s.charAt(i) == c ) {
				
                             dp [i][j][0] = dp [i + 1][j - 1][1] + 2 ;
					
                         } else if ( dp [i + 1][j - 1][0]>=1 ) {
				
                             dp [i][j][0] = dp [i + 1][j - 1][0] + 2 ;
				
                         }
			
        } 
				else {
				
                                    dp [i][j][1] = Math.max ( dp [i][j - 1][1] , dp [i + 1][j][1] ) ;
				
                                    dp [i][j][0] = Math.max ( dp [i + 1][j][0] , dp [i][j - 1][0] ) ;
					
				}
			}
		}

        System.out.println( dp[0][n-1][0] );

    }
    
}
/*

2
a
dcbabcd
b
bbbb

*/
/*

2
a
dcbabcd
b
bbbb

*/

/*

1
e
vfqjnptyommgppfemxmxj


*/

/*

1
g
ozcoexpioabi

*/

/*

1
w
evaawfhtvlsqfdcxg

*/

/*

1
t
tlcirntonfnfocernftoxwndvtqceyjts

*/
