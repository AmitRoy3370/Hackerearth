import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

 class TestCase {
    
    static Scanner scanner=new Scanner(System.in);
    
    static int node,edges,count=0;
    
    static class Graph{
        
        int node;

        List<List<Integer>> list=new ArrayList<>();
        
        boolean visited[];
        
        public Graph() {
            
            
        }

        public Graph(int node) {
            this.node = node;
        
            visited=new boolean[node];
            
            for(int i=0;i<node;i++){
                
                list.add(new ArrayList<>());
                
            }
            
        }

        public int getNode() {
            return node;
        }

        public void setNode(int node) {
            this.node = node;
        }
        
        public void AddEdge(int a,int b){
            
            try{
                
                list.get(a).add(b);
                
            }catch(Exception e){
                
                
            }
            
            try{
                
                list.get(b).add(a);
                
            }catch(Exception e){
                
                
            }
            
        }
        
        void DFS(int source){
            
            visited[source]=true;
            
            Stack<Integer> stack=new Stack<>();
            
            stack.push(source);
            
            int element=source;
            
            while(!stack.isEmpty()){
                
                element=stack.pop();
                
              for(int i: list.get(element)){
                  
                  try{
                  
                  if( visited[i]==false ){
                      
                      visited[i]=true;
                      
                      stack.push(i);
                      
                  }
                  
                  }catch(Exception e){
                  
                  //    count++;
                      
                  }
                  
              }
                
            }
            
        }
        
        void connected(){
            
            for(int i=0;i<this.getNode();i++){
                
                if( visited[i]==false ){
                    
                    //count++;
                    
                    this.DFS(i);
                    
                    count++;
                    
                }
                
            }
            
            System.out.println(count);
            
        }
        
    }
    
    static Graph graph=new Graph();
    
    static int a,b;
    
    public static void main(String[] args) {
        
        node=scanner.nextInt();
        edges=scanner.nextInt();
        
        graph=new Graph(node);
        
        for(int i=0;i<edges;i++){
            
            a=scanner.nextInt()-1;
            b=scanner.nextInt()-1;
            
            graph.AddEdge(a, b);
            
        }
        
        graph.connected();
        
    }
    
}
/*8 5
1 2
2 3
2 4
3 5
6 7*/

/*7 8
1 2
2 3
3 4
3 5
4 5
4 6
4 7
5 6*/

/*6 4
1 2
1 3
2 3
4 5*/
